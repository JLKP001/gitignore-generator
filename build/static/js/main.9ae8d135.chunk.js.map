{"version":3,"sources":["components/Header.tsx","templates/templates.ts","templates/c.js","templates/cmake.js","templates/cpp.js","templates/go.js","templates/java.js","templates/labview.js","templates/node.js","templates/python.js","templates/r.js","templates/ruby.js","templates/rust.js","components/TemplateListItem.tsx","components/TemplateList.tsx","components/TemplateSelector.tsx","components/OutputDialog.tsx","components/MessageBar.tsx","components/MainBody.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","icon","marginRight","spacing","title","textTransform","Header","classes","AppBar","position","Toolbar","className","data-testid","Typography","variant","initialTemplates","name","data","checked","listItems","paddingTop","paddingBottom","listItemsText","TemplateListItem","template","handleChange","ListItem","Checkbox","onChange","inputProps","ListItemText","primary","TemplateList","templates","List","component","map","root","marginLeft","marginTop","width","textAlign","container","display","subTitle","color","palette","grey","button","margin","TemplateSelector","output","setOutput","openDialog","useState","setTemplates","Paper","event","targetName","target","newTemplates","newOutput","filter","item","join","Button","onClick","disabled","closeButton","right","top","textBox","padding","actions","justifyContent","OutputDialog","handleClose","open","handleOpenSnackbar","Dialog","onClose","fullWidth","maxWidth","DialogTitle","IconButton","aria-label","language","style","materialDark","DialogActions","navigator","clipboard","writeText","MessageBar","openSnackbar","handleCloseSnackbar","snackbarMsg","Snackbar","autoHideDuration","Alert","elevation","severity","MainBody","setOpenDialog","setOpenSnackbar","setSnackbarMsg","message","App","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ae8d135.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, makeStyles, Toolbar, Typography } from \"@material-ui/core\";\r\nimport LibraryBooksIcon from \"@material-ui/icons/LibraryBooks\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: { marginRight: theme.spacing(2) },\r\n  title: { textTransform: \"capitalize\" },\r\n}));\r\n\r\nexport const Header = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <LibraryBooksIcon className={classes.icon} data-testid=\"icon\" />\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          gitignore generator\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n","import c_data from \"./c\";\r\nimport cmake_data from \"./cmake\";\r\nimport cpp_data from \"./cpp\";\r\nimport go_data from \"./go\";\r\nimport java_data from \"./java\";\r\nimport labview_data from \"./labview\";\r\nimport node_data from \"./node\";\r\nimport python_data from \"./python\";\r\nimport r_data from \"./r\";\r\nimport ruby_data from \"./ruby\";\r\nimport rust_data from \"./rust\";\r\n\r\n// Templates obtained from https://github.com/github/gitignore\r\n\r\nexport type TemplateType = {\r\n  name: string;\r\n  data: string;\r\n  checked: boolean;\r\n};\r\n\r\nexport const initialTemplates: Array<TemplateType> = [\r\n  { name: \"c\", data: c_data, checked: false },\r\n  { name: \"cmake\", data: cmake_data, checked: false },\r\n  { name: \"c++\", data: cpp_data, checked: false },\r\n  { name: \"go\", data: go_data, checked: false },\r\n  { name: \"java\", data: java_data, checked: false },\r\n  { name: \"labview\", data: labview_data, checked: false },\r\n  { name: \"node\", data: node_data, checked: false },\r\n  { name: \"python\", data: python_data, checked: false },\r\n  { name: \"r\", data: r_data, checked: false },\r\n  { name: \"ruby\", data: ruby_data, checked: false },\r\n  { name: \"rust\", data: rust_data, checked: false },\r\n];\r\n","const data = `\r\n# -----------------------\r\n# C\r\n# -----------------------\r\n# Prerequisites\r\n*.d\r\n\r\n# Object files\r\n*.o\r\n*.ko\r\n*.obj\r\n*.elf\r\n\r\n# Linker output\r\n*.ilk\r\n*.map\r\n*.exp\r\n\r\n# Precompiled Headers\r\n*.gch\r\n*.pch\r\n\r\n# Libraries\r\n*.lib\r\n*.a\r\n*.la\r\n*.lo\r\n\r\n# Shared objects (inc. Windows DLLs)\r\n*.dll\r\n*.so\r\n*.so.*\r\n*.dylib\r\n\r\n# Executables\r\n*.exe\r\n*.out\r\n*.app\r\n*.i*86\r\n*.x86_64\r\n*.hex\r\n\r\n# Debug files\r\n*.dSYM/\r\n*.su\r\n*.idb\r\n*.pdb\r\n\r\n# Kernel Module Compile Results\r\n*.mod*\r\n*.cmd\r\n.tmp_versions/\r\nmodules.order\r\nModule.symvers\r\nMkfile.old\r\ndkms.conf\r\n`;\r\n\r\nexport default data;\r\n","const data = `\r\n# -----------------------\r\n# CMake\r\n# -----------------------\r\nCMakeLists.txt.user\r\nCMakeCache.txt\r\nCMakeFiles\r\nCMakeScripts\r\nTesting\r\nMakefile\r\ncmake_install.cmake\r\ninstall_manifest.txt\r\ncompile_commands.json\r\nCTestTestfile.cmake\r\n_deps\r\n`;\r\n\r\nexport default data;\r\n","const data = `\r\n# -----------------------\r\n# C++\r\n# -----------------------\r\n# Prerequisites\r\n*.d\r\n\r\n# Compiled Object files\r\n*.slo\r\n*.lo\r\n*.o\r\n*.obj\r\n\r\n# Precompiled Headers\r\n*.gch\r\n*.pch\r\n\r\n# Compiled Dynamic libraries\r\n*.so\r\n*.dylib\r\n*.dll\r\n\r\n# Fortran module files\r\n*.mod\r\n*.smod\r\n\r\n# Compiled Static libraries\r\n*.lai\r\n*.la\r\n*.a\r\n*.lib\r\n\r\n# Executables\r\n*.exe\r\n*.out\r\n*.app\r\n`;\r\n\r\nexport default data;\r\n","const data = `\r\n# -----------------------\r\n# Go\r\n# -----------------------\r\n# Binaries for programs and plugins\r\n*.exe\r\n*.exe~\r\n*.dll\r\n*.so\r\n*.dylib\r\n\r\n# Test binary, built with 'go test -c'\r\n*.test\r\n\r\n# Output of the go coverage tool, specifically when used with LiteIDE\r\n*.out\r\n\r\n# Dependency directories (remove the comment below to include it)\r\n# vendor/\r\n`;\r\n\r\nexport default data;\r\n","const data = `\r\n# -----------------------\r\n# Java\r\n# -----------------------\r\n# Compiled class file\r\n*.class\r\n\r\n# Log file\r\n*.log\r\n\r\n# BlueJ files\r\n*.ctxt\r\n\r\n# Mobile Tools for Java (J2ME)\r\n.mtj.tmp/\r\n\r\n# Package Files #\r\n*.jar\r\n*.war\r\n*.nar\r\n*.ear\r\n*.zip\r\n*.tar.gz\r\n*.rar\r\n\r\n# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml\r\nhs_err_pid*\r\n`;\r\n\r\nexport default data;\r\n","const data = `\r\n# -----------------------\r\n# LabVIEW\r\n# -----------------------\r\n# Libraries\r\n*.lvlibp\r\n*.llb\r\n\r\n# Shared objects (inc. Windows DLLs)\r\n*.dll\r\n*.so\r\n*.so.*\r\n*.dylib\r\n\r\n# Executables\r\n*.exe\r\n\r\n# Metadata\r\n*.aliases\r\n*.lvlps\r\n.cache/\r\n`;\r\n\r\nexport default data;\r\n","const data = `\r\n# -----------------------\r\n# Node\r\n# -----------------------\r\n# Logs\r\nlogs\r\n*.log\r\nnpm-debug.log*\r\nyarn-debug.log*\r\nyarn-error.log*\r\nlerna-debug.log*\r\n\r\n# Diagnostic reports (https://nodejs.org/api/report.html)\r\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\r\n\r\n# Runtime data\r\npids\r\n*.pid\r\n*.seed\r\n*.pid.lock\r\n\r\n# Directory for instrumented libs generated by jscoverage/JSCover\r\nlib-cov\r\n\r\n# Coverage directory used by tools like istanbul\r\ncoverage\r\n*.lcov\r\n\r\n# nyc test coverage\r\n.nyc_output\r\n\r\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\r\n.grunt\r\n\r\n# Bower dependency directory (https://bower.io/)\r\nbower_components\r\n\r\n# node-waf configuration\r\n.lock-wscript\r\n\r\n# Compiled binary addons (https://nodejs.org/api/addons.html)\r\nbuild/Release\r\n\r\n# Dependency directories\r\nnode_modules/\r\njspm_packages/\r\n\r\n# Snowpack dependency directory (https://snowpack.dev/)\r\nweb_modules/\r\n\r\n# TypeScript cache\r\n*.tsbuildinfo\r\n\r\n# Optional npm cache directory\r\n.npm\r\n\r\n# Optional eslint cache\r\n.eslintcache\r\n\r\n# Microbundle cache\r\n.rpt2_cache/\r\n.rts2_cache_cjs/\r\n.rts2_cache_es/\r\n.rts2_cache_umd/\r\n\r\n# Optional REPL history\r\n.node_repl_history\r\n\r\n# Output of 'npm pack'\r\n*.tgz\r\n\r\n# Yarn Integrity file\r\n.yarn-integrity\r\n\r\n# dotenv environment variables file\r\n.env\r\n.env.test\r\n\r\n# parcel-bundler cache (https://parceljs.org/)\r\n.cache\r\n.parcel-cache\r\n\r\n# Next.js build output\r\n.next\r\nout\r\n\r\n# Nuxt.js build / generate output\r\n.nuxt\r\ndist\r\n\r\n# Gatsby files\r\n.cache/\r\n# Comment in the public line in if your project uses Gatsby and not Next.js\r\n# https://nextjs.org/blog/next-9-1#public-directory-support\r\n# public\r\n\r\n# vuepress build output\r\n.vuepress/dist\r\n\r\n# Serverless directories\r\n.serverless/\r\n\r\n# FuseBox cache\r\n.fusebox/\r\n\r\n# DynamoDB Local files\r\n.dynamodb/\r\n\r\n# TernJS port file\r\n.tern-port\r\n\r\n# Stores VSCode versions used for testing VSCode extensions\r\n.vscode-test\r\n\r\n# yarn v2\r\n.yarn/cache\r\n.yarn/unplugged\r\n.yarn/build-state.yml\r\n.yarn/install-state.gz\r\n.pnp.*\r\n`;\r\n\r\nexport default data;\r\n","const data = `\r\n# -----------------------\r\n# Python\r\n# -----------------------\r\n# Byte-compiled / optimized / DLL files\r\n__pycache__/\r\n*.py[cod]\r\n*$py.class\r\n\r\n# C extensions\r\n*.so\r\n\r\n# Distribution / packaging\r\n.Python\r\nbuild/\r\ndevelop-eggs/\r\ndist/\r\ndownloads/\r\neggs/\r\n.eggs/\r\nlib/\r\nlib64/\r\nparts/\r\nsdist/\r\nvar/\r\nwheels/\r\nshare/python-wheels/\r\n*.egg-info/\r\n.installed.cfg\r\n*.egg\r\nMANIFEST\r\n\r\n# PyInstaller\r\n#  Usually these files are written by a python script from a template\r\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\r\n*.manifest\r\n*.spec\r\n\r\n# Installer logs\r\npip-log.txt\r\npip-delete-this-directory.txt\r\n\r\n# Unit test / coverage reports\r\nhtmlcov/\r\n.tox/\r\n.nox/\r\n.coverage\r\n.coverage.*\r\n.cache\r\nnosetests.xml\r\ncoverage.xml\r\n*.cover\r\n*.py,cover\r\n.hypothesis/\r\n.pytest_cache/\r\ncover/\r\n\r\n# Translations\r\n*.mo\r\n*.pot\r\n\r\n# Django stuff:\r\n*.log\r\nlocal_settings.py\r\ndb.sqlite3\r\ndb.sqlite3-journal\r\n\r\n# Flask stuff:\r\ninstance/\r\n.webassets-cache\r\n\r\n# Scrapy stuff:\r\n.scrapy\r\n\r\n# Sphinx documentation\r\ndocs/_build/\r\n\r\n# PyBuilder\r\n.pybuilder/\r\ntarget/\r\n\r\n# Jupyter Notebook\r\n.ipynb_checkpoints\r\n\r\n# IPython\r\nprofile_default/\r\nipython_config.py\r\n\r\n# pyenv\r\n#   For a library or package, you might want to ignore these files since the code is\r\n#   intended to run in multiple environments; otherwise, check them in:\r\n# .python-version\r\n\r\n# pipenv\r\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\r\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\r\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\r\n#   install all needed dependencies.\r\n#Pipfile.lock\r\n\r\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\r\n__pypackages__/\r\n\r\n# Celery stuff\r\ncelerybeat-schedule\r\ncelerybeat.pid\r\n\r\n# SageMath parsed files\r\n*.sage.py\r\n\r\n# Environments\r\n.env\r\n.venv\r\nenv/\r\nvenv/\r\nENV/\r\nenv.bak/\r\nvenv.bak/\r\n\r\n# Spyder project settings\r\n.spyderproject\r\n.spyproject\r\n\r\n# Rope project settings\r\n.ropeproject\r\n\r\n# mkdocs documentation\r\n/site\r\n\r\n# mypy\r\n.mypy_cache/\r\n.dmypy.json\r\ndmypy.json\r\n\r\n# Pyre type checker\r\n.pyre/\r\n\r\n# pytype static type analyzer\r\n.pytype/\r\n\r\n# Cython debug symbols\r\ncython_debug/\r\n`;\r\n\r\nexport default data;\r\n","const data = `\r\n# -----------------------\r\n# R\r\n# -----------------------\r\n# History files\r\n.Rhistory\r\n.Rapp.history\r\n\r\n# Session Data files\r\n.RData\r\n\r\n# User-specific files\r\n.Ruserdata\r\n\r\n# Example code in package build process\r\n*-Ex.R\r\n\r\n# Output files from R CMD build\r\n/*.tar.gz\r\n\r\n# Output files from R CMD check\r\n/*.Rcheck/\r\n\r\n# RStudio files\r\n.Rproj.user/\r\n\r\n# produced vignettes\r\nvignettes/*.html\r\nvignettes/*.pdf\r\n\r\n# OAuth2 token, see https://github.com/hadley/httr/releases/tag/v0.3\r\n.httr-oauth\r\n\r\n# knitr and R markdown default cache directories\r\n*_cache/\r\n/cache/\r\n\r\n# Temporary files created by R markdown\r\n*.utf8.md\r\n*.knit.md\r\n\r\n# R Environment Variables\r\n.Renviron\r\n\r\n# pkgdown site\r\ndocs/\r\n\r\n# translation temp files\r\npo/*~\r\n`;\r\n\r\nexport default data;\r\n","const data = `\r\n# -----------------------\r\n# Ruby\r\n# -----------------------\r\n*.gem\r\n*.rbc\r\n/.config\r\n/coverage/\r\n/InstalledFiles\r\n/pkg/\r\n/spec/reports/\r\n/spec/examples.txt\r\n/test/tmp/\r\n/test/version_tmp/\r\n/tmp/\r\n\r\n# Used by dotenv library to load environment variables.\r\n# .env\r\n\r\n# Ignore Byebug command history file.\r\n.byebug_history\r\n\r\n## Specific to RubyMotion:\r\n.dat*\r\n.repl_history\r\nbuild/\r\n*.bridgesupport\r\nbuild-iPhoneOS/\r\nbuild-iPhoneSimulator/\r\n\r\n## Specific to RubyMotion (use of CocoaPods):\r\n#\r\n# We recommend against adding the Pods directory to your .gitignore. However\r\n# you should judge for yourself, the pros and cons are mentioned at:\r\n# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control\r\n#\r\n# vendor/Pods/\r\n\r\n## Documentation cache and generated files:\r\n/.yardoc/\r\n/_yardoc/\r\n/doc/\r\n/rdoc/\r\n\r\n## Environment normalization:\r\n/.bundle/\r\n/vendor/bundle\r\n/lib/bundler/man/\r\n\r\n# for a library or gem, you might want to ignore these files since the code is\r\n# intended to run in multiple environments; otherwise, check them in:\r\n# Gemfile.lock\r\n# .ruby-version\r\n# .ruby-gemset\r\n\r\n# unless supporting rvm < 1.11.0 or doing something fancy, ignore this:\r\n.rvmrc\r\n\r\n# Used by RuboCop. Remote config files pulled in from inherit_from directive.\r\n# .rubocop-https?--*\r\n`;\r\n\r\nexport default data;\r\n","const data = `\r\n# -----------------------\r\n# Rust\r\n# -----------------------\r\n# Generated by Cargo\r\n# will have compiled files and executables\r\ndebug/\r\ntarget/\r\n\r\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\r\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\r\nCargo.lock\r\n\r\n# These are backup files generated by rustfmt\r\n**/*.rs.bk\r\n`;\r\n\r\nexport default data;\r\n","import React from \"react\";\r\nimport {\r\n  Checkbox,\r\n  ListItem,\r\n  ListItemText,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\n\r\nimport { TemplateType } from \"../templates/templates\";\r\n\r\nconst useStyles = makeStyles({\r\n  listItems: { paddingTop: \"0\", paddingBottom: \"0\" },\r\n  listItemsText: { textTransform: \"capitalize\" },\r\n});\r\n\r\ninterface TemplateListItemProps {\r\n  template: TemplateType;\r\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport const TemplateListItem = ({\r\n  template,\r\n  handleChange,\r\n}: TemplateListItemProps) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <ListItem key={template.name} className={classes.listItems}>\r\n      <Checkbox\r\n        checked={template.checked}\r\n        onChange={handleChange}\r\n        inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n        name={template.name}\r\n      />\r\n      <ListItemText primary={template.name} className={classes.listItemsText} />\r\n    </ListItem>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { List } from \"@material-ui/core\";\r\n\r\nimport { TemplateType } from \"../templates/templates\";\r\nimport { TemplateListItem } from \"./TemplateListItem\";\r\n\r\ninterface TemplateListProps {\r\n  templates: Array<TemplateType>;\r\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport const TemplateList = ({\r\n  templates,\r\n  handleChange,\r\n}: TemplateListProps) => {\r\n  return (\r\n    <List component=\"div\">\r\n      {templates.map((template) => (\r\n        <TemplateListItem\r\n          key={template.name}\r\n          template={template}\r\n          handleChange={handleChange}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Button, makeStyles, Paper, Typography } from \"@material-ui/core\";\r\n\r\nimport { initialTemplates } from \"../templates/templates\";\r\nimport { TemplateList } from \"./TemplateList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    marginTop: theme.spacing(5),\r\n    width: \"60%\",\r\n    textAlign: \"center\",\r\n  },\r\n  container: { display: \"inline-block\" },\r\n  title: {\r\n    textTransform: \"capitalize\",\r\n    marginTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(1),\r\n  },\r\n  subTitle: {\r\n    textTransform: \"capitalize\",\r\n    color: theme.palette.grey[500],\r\n  },\r\n  button: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\ninterface TemplateSelectorProps {\r\n  output: string;\r\n  setOutput: (value: string) => void;\r\n  openDialog: () => void;\r\n}\r\n\r\nexport const TemplateSelector = ({\r\n  output,\r\n  setOutput,\r\n  openDialog,\r\n}: TemplateSelectorProps) => {\r\n  const classes = useStyles();\r\n  const [templates, setTemplates] = useState(initialTemplates);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const targetName = event.target.name;\r\n    const newTemplates = templates.map((template) => {\r\n      if (template.name !== targetName) {\r\n        return template;\r\n      } else {\r\n        return { ...template, checked: event.target.checked };\r\n      }\r\n    });\r\n\r\n    const newOutput = newTemplates\r\n      .map((template) => {\r\n        if (template.checked) {\r\n          return template.data;\r\n        }\r\n        return null;\r\n      })\r\n      .filter((item) => item)\r\n      .join(\"\\n\");\r\n\r\n    setTemplates(newTemplates);\r\n    setOutput(newOutput);\r\n  };\r\n\r\n  return (\r\n    <Paper variant=\"outlined\" className={classes.root}>\r\n      <Typography variant=\"h4\" className={classes.title}>\r\n        select templates\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" className={classes.subTitle}>\r\n        choose files to ignore from a list of templates\r\n      </Typography>\r\n      <div className={classes.container}>\r\n        <TemplateList templates={templates} handleChange={handleChange} />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.button}\r\n          onClick={openDialog}\r\n          disabled={output ? false : true}\r\n        >\r\n          show gitignore!\r\n        </Button>\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  IconButton,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport { materialDark } from \"react-syntax-highlighter/dist/cjs/styles/prism\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: { display: \"inline-block\" },\r\n  title: { textTransform: \"capitalize\" },\r\n  closeButton: {\r\n    position: \"absolute\",\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n  textBox: { padding: theme.spacing(2) },\r\n  actions: { justifyContent: \"center\" },\r\n}));\r\n\r\ninterface OutputDialogProps {\r\n  handleClose: () => void;\r\n  open: boolean;\r\n  output: string;\r\n  handleOpenSnackbar: (message: string) => void;\r\n}\r\n\r\nexport const OutputDialog = ({\r\n  handleClose,\r\n  open,\r\n  output,\r\n  handleOpenSnackbar,\r\n}: OutputDialogProps) => {\r\n  const classes = useStyles();\r\n\r\n  const copyToClipboard = () => {\r\n    navigator.clipboard.writeText(output);\r\n    handleOpenSnackbar(\"Copied to clipboard successfully!\");\r\n  };\r\n\r\n  return (\r\n    <Dialog onClose={handleClose} open={open} fullWidth={true} maxWidth=\"sm\">\r\n      <DialogTitle className={classes.title}>\r\n        gitignore file\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          className={classes.closeButton}\r\n          onClick={handleClose}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </DialogTitle>\r\n      <SyntaxHighlighter language=\"ignore\" style={materialDark}>\r\n        {output}\r\n      </SyntaxHighlighter>\r\n      <DialogActions className={classes.actions}>\r\n        <Button onClick={copyToClipboard} variant=\"contained\" color=\"secondary\">\r\n          copy to clipboard\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Snackbar } from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\ninterface MessageBarProps {\r\n  openSnackbar: boolean;\r\n  handleCloseSnackbar: () => void;\r\n  snackbarMsg: string;\r\n}\r\n\r\nexport const MessageBar = ({\r\n  openSnackbar,\r\n  handleCloseSnackbar,\r\n  snackbarMsg,\r\n}: MessageBarProps) => {\r\n  return (\r\n    <Snackbar\r\n      open={openSnackbar}\r\n      autoHideDuration={3000}\r\n      onClose={handleCloseSnackbar}\r\n    >\r\n      <Alert\r\n        elevation={6}\r\n        variant=\"filled\"\r\n        onClose={handleCloseSnackbar}\r\n        severity=\"success\"\r\n      >\r\n        {snackbarMsg}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { TemplateSelector } from \"./TemplateSelector\";\r\nimport { OutputDialog } from \"./OutputDialog\";\r\nimport { MessageBar } from \"./MessageBar\";\r\n\r\nexport const MainBody = () => {\r\n  const [output, setOutput] = useState(\"\");\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [openSnackbar, setOpenSnackbar] = useState(false);\r\n  const [snackbarMsg, setSnackbarMsg] = useState(\"\");\r\n\r\n  const handleOpenDialog = () => {\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  const handleOpenSnackbar = (message: string) => {\r\n    setOpenSnackbar(true);\r\n    setSnackbarMsg(message);\r\n  };\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setOpenSnackbar(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TemplateSelector\r\n        output={output}\r\n        setOutput={setOutput}\r\n        openDialog={handleOpenDialog}\r\n      />\r\n      <OutputDialog\r\n        handleClose={handleCloseDialog}\r\n        open={openDialog}\r\n        output={output}\r\n        handleOpenSnackbar={handleOpenSnackbar}\r\n      />\r\n      <MessageBar\r\n        openSnackbar={openSnackbar}\r\n        handleCloseSnackbar={handleCloseSnackbar}\r\n        snackbarMsg={snackbarMsg}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { CssBaseline, makeStyles } from \"@material-ui/core\";\n\nimport { Header } from \"./components/Header\";\nimport { MainBody } from \"./components/MainBody\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: { paddingBottom: theme.spacing(5) },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Header />\n        <MainBody />\n      </div>\n      <CssBaseline />\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"fontsource-roboto\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}