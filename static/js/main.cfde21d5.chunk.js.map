{"version":3,"sources":["components/Header.tsx","templates/templates.js","templates/c.js","templates/cpp.js","templates/python.js","templates/labview.js","components/TemplateForm.tsx","components/OutputDialog.tsx","components/MainBody.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","icon","marginRight","spacing","title","textTransform","Header","classes","AppBar","position","Toolbar","className","Typography","variant","initialTemplates","name","data","checked","root","display","listItems","paddingTop","paddingBottom","listItemsText","button","margin","TemplateForm","setOutput","openDialog","useState","templates","setTemplates","handleChange","event","targetName","target","newTemplates","map","template","newOutput","filter","item","join","List","component","ListItem","Checkbox","onChange","inputProps","ListItemText","primary","Button","color","onClick","closeButton","right","top","palette","grey","textBox","padding","actions","justifyContent","OutputDialog","handleClose","open","output","Dialog","onClose","DialogTitle","IconButton","aria-label","language","style","materialDark","DialogActions","navigator","clipboard","writeText","marginLeft","marginTop","width","textAlign","subTitle","MainBody","setOpenDialog","Paper","App","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfde21d5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, makeStyles, Toolbar, Typography } from \"@material-ui/core\";\r\nimport LibraryBooksIcon from \"@material-ui/icons/LibraryBooks\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: { marginRight: theme.spacing(2) },\r\n  title: { textTransform: \"capitalize\" },\r\n}));\r\n\r\nexport const Header = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <LibraryBooksIcon className={classes.icon} />\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          gitignore generator\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n","import c_data from \"./c\";\r\nimport cpp_data from \"./cpp\";\r\nimport python_data from \"./python\";\r\nimport labview_data from \"./labview\";\r\n\r\nexport const initialTemplates = [\r\n  { name: \"c\", data: c_data, checked: false },\r\n  { name: \"c++\", data: cpp_data, checked: false },\r\n  { name: \"altium\", data: \"Some data\", checked: false },\r\n  { name: \"python\", data: python_data, checked: false },\r\n  { name: \"labview\", data: labview_data, checked: false },\r\n];\r\n","const data = `\r\n# -----------------------\r\n# C\r\n# -----------------------\r\n# Prerequisites\r\n*.d\r\n\r\n# Object files\r\n*.o\r\n*.ko\r\n*.obj\r\n*.elf\r\n\r\n# Linker output\r\n*.ilk\r\n*.map\r\n*.exp\r\n\r\n# Precompiled Headers\r\n*.gch\r\n*.pch\r\n\r\n# Libraries\r\n*.lib\r\n*.a\r\n*.la\r\n*.lo\r\n\r\n# Shared objects (inc. Windows DLLs)\r\n*.dll\r\n*.so\r\n*.so.*\r\n*.dylib\r\n\r\n# Executables\r\n*.exe\r\n*.out\r\n*.app\r\n*.i*86\r\n*.x86_64\r\n*.hex\r\n\r\n# Debug files\r\n*.dSYM/\r\n*.su\r\n*.idb\r\n*.pdb\r\n\r\n# Kernel Module Compile Results\r\n*.mod*\r\n*.cmd\r\n.tmp_versions/\r\nmodules.order\r\nModule.symvers\r\nMkfile.old\r\ndkms.conf\r\n`;\r\n\r\nexport default data;\r\n","const data = `\r\n# -----------------------\r\n# C++\r\n# -----------------------\r\n# Prerequisites\r\n*.d\r\n\r\n# Compiled Object files\r\n*.slo\r\n*.lo\r\n*.o\r\n*.obj\r\n\r\n# Precompiled Headers\r\n*.gch\r\n*.pch\r\n\r\n# Compiled Dynamic libraries\r\n*.so\r\n*.dylib\r\n*.dll\r\n\r\n# Fortran module files\r\n*.mod\r\n*.smod\r\n\r\n# Compiled Static libraries\r\n*.lai\r\n*.la\r\n*.a\r\n*.lib\r\n\r\n# Executables\r\n*.exe\r\n*.out\r\n*.app\r\n`;\r\n\r\nexport default data;\r\n","const data = `\r\n# -----------------------\r\n# Python\r\n# -----------------------\r\n# Byte-compiled / optimized / DLL files\r\n__pycache__/\r\n*.py[cod]\r\n*$py.class\r\n\r\n# C extensions\r\n*.so\r\n\r\n# Distribution / packaging\r\n.Python\r\nbuild/\r\ndevelop-eggs/\r\ndist/\r\ndownloads/\r\neggs/\r\n.eggs/\r\nlib/\r\nlib64/\r\nparts/\r\nsdist/\r\nvar/\r\nwheels/\r\nshare/python-wheels/\r\n*.egg-info/\r\n.installed.cfg\r\n*.egg\r\nMANIFEST\r\n\r\n# PyInstaller\r\n#  Usually these files are written by a python script from a template\r\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\r\n*.manifest\r\n*.spec\r\n\r\n# Installer logs\r\npip-log.txt\r\npip-delete-this-directory.txt\r\n\r\n# Unit test / coverage reports\r\nhtmlcov/\r\n.tox/\r\n.nox/\r\n.coverage\r\n.coverage.*\r\n.cache\r\nnosetests.xml\r\ncoverage.xml\r\n*.cover\r\n*.py,cover\r\n.hypothesis/\r\n.pytest_cache/\r\ncover/\r\n\r\n# Translations\r\n*.mo\r\n*.pot\r\n\r\n# Django stuff:\r\n*.log\r\nlocal_settings.py\r\ndb.sqlite3\r\ndb.sqlite3-journal\r\n\r\n# Flask stuff:\r\ninstance/\r\n.webassets-cache\r\n\r\n# Scrapy stuff:\r\n.scrapy\r\n\r\n# Sphinx documentation\r\ndocs/_build/\r\n\r\n# PyBuilder\r\n.pybuilder/\r\ntarget/\r\n\r\n# Jupyter Notebook\r\n.ipynb_checkpoints\r\n\r\n# IPython\r\nprofile_default/\r\nipython_config.py\r\n\r\n# pyenv\r\n#   For a library or package, you might want to ignore these files since the code is\r\n#   intended to run in multiple environments; otherwise, check them in:\r\n# .python-version\r\n\r\n# pipenv\r\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\r\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\r\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\r\n#   install all needed dependencies.\r\n#Pipfile.lock\r\n\r\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\r\n__pypackages__/\r\n\r\n# Celery stuff\r\ncelerybeat-schedule\r\ncelerybeat.pid\r\n\r\n# SageMath parsed files\r\n*.sage.py\r\n\r\n# Environments\r\n.env\r\n.venv\r\nenv/\r\nvenv/\r\nENV/\r\nenv.bak/\r\nvenv.bak/\r\n\r\n# Spyder project settings\r\n.spyderproject\r\n.spyproject\r\n\r\n# Rope project settings\r\n.ropeproject\r\n\r\n# mkdocs documentation\r\n/site\r\n\r\n# mypy\r\n.mypy_cache/\r\n.dmypy.json\r\ndmypy.json\r\n\r\n# Pyre type checker\r\n.pyre/\r\n\r\n# pytype static type analyzer\r\n.pytype/\r\n\r\n# Cython debug symbols\r\ncython_debug/\r\n`;\r\n\r\nexport default data;\r\n","const data = `\r\n# -----------------------\r\n# LabVIEW\r\n# -----------------------\r\n# Libraries\r\n*.lvlibp\r\n*.llb\r\n\r\n# Shared objects (inc. Windows DLLs)\r\n*.dll\r\n*.so\r\n*.so.*\r\n*.dylib\r\n\r\n# Executables\r\n*.exe\r\n\r\n# Metadata\r\n*.aliases\r\n*.lvlps\r\n.cache/\r\n`;\r\n\r\nexport default data;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\n\r\nimport { initialTemplates } from \"../templates/templates\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: { display: \"inline-block\" },\r\n  listItems: { paddingTop: \"0\", paddingBottom: \"0\" },\r\n  listItemsText: { textTransform: \"capitalize\" },\r\n  button: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\ninterface TemplateFormProps {\r\n  setOutput: (value: string) => void;\r\n  openDialog: () => void;\r\n}\r\n\r\nexport const TemplateForm = ({ setOutput, openDialog }: TemplateFormProps) => {\r\n  const classes = useStyles();\r\n  const [templates, setTemplates] = useState(initialTemplates);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const targetName = event.target.name;\r\n    const newTemplates = templates.map((template) => {\r\n      if (template.name !== targetName) {\r\n        return template;\r\n      } else {\r\n        return { ...template, checked: event.target.checked };\r\n      }\r\n    });\r\n\r\n    const newOutput = newTemplates\r\n      .map((template) => {\r\n        if (template.checked) {\r\n          return template.data;\r\n        }\r\n        return null;\r\n      })\r\n      .filter((item) => item)\r\n      .join(\"\\n\");\r\n\r\n    setTemplates(newTemplates);\r\n    setOutput(newOutput);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <List component=\"div\">\r\n        {templates.map((template) => (\r\n          <ListItem key={template.name} className={classes.listItems}>\r\n            <Checkbox\r\n              checked={template.checked}\r\n              onChange={handleChange}\r\n              inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n              name={template.name}\r\n            />\r\n            <ListItemText\r\n              primary={template.name}\r\n              className={classes.listItemsText}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className={classes.button}\r\n        onClick={openDialog}\r\n      >\r\n        show gitignore!\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  IconButton,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport { materialDark } from \"react-syntax-highlighter/dist/esm/styles/prism\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: { display: \"inline-block\" },\r\n  title: { textTransform: \"capitalize\" },\r\n  closeButton: {\r\n    position: \"absolute\",\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n  textBox: { padding: theme.spacing(2) },\r\n  actions: { justifyContent: \"center\" },\r\n}));\r\n\r\ninterface OutputDialogProps {\r\n  handleClose: () => void;\r\n  open: boolean;\r\n  output: string;\r\n}\r\n\r\nexport const OutputDialog = ({\r\n  handleClose,\r\n  open,\r\n  output,\r\n}: OutputDialogProps) => {\r\n  const classes = useStyles();\r\n\r\n  const copyToClipboard = () => {\r\n    navigator.clipboard.writeText(output);\r\n  };\r\n\r\n  return (\r\n    <Dialog onClose={handleClose} open={open}>\r\n      <DialogTitle className={classes.title}>\r\n        gitignore file\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          className={classes.closeButton}\r\n          onClick={handleClose}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </DialogTitle>\r\n      <SyntaxHighlighter language=\"ignore\" style={materialDark}>\r\n        {output}\r\n      </SyntaxHighlighter>\r\n      <DialogActions className={classes.actions}>\r\n        <Button onClick={copyToClipboard} variant=\"contained\" color=\"secondary\">\r\n          copy to clipboard\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles, Paper, Typography } from \"@material-ui/core\";\r\n\r\nimport { TemplateForm } from \"./TemplateForm\";\r\nimport { OutputDialog } from \"./OutputDialog\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    marginTop: theme.spacing(5),\r\n    width: \"60%\",\r\n    textAlign: \"center\",\r\n  },\r\n  title: {\r\n    textTransform: \"capitalize\",\r\n    marginTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(1),\r\n  },\r\n  subTitle: {\r\n    textTransform: \"capitalize\",\r\n    color: theme.palette.grey[500],\r\n  },\r\n}));\r\n\r\nexport const MainBody = () => {\r\n  const classes = useStyles();\r\n  const [output, setOutput] = useState(\"\");\r\n  const [openDialog, setOpenDialog] = useState(true);\r\n\r\n  const handleOpenDialog = () => {\r\n    setOpenDialog(true);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Paper variant=\"outlined\" className={classes.root}>\r\n        <Typography variant=\"h4\" className={classes.title}>\r\n          select templates\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\" className={classes.subTitle}>\r\n          choose files to ignore from a list of templates\r\n        </Typography>\r\n        <TemplateForm setOutput={setOutput} openDialog={handleOpenDialog} />\r\n      </Paper>\r\n      <OutputDialog\r\n        handleClose={handleCloseDialog}\r\n        open={openDialog}\r\n        output={output}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { CssBaseline, makeStyles } from \"@material-ui/core\";\n\nimport { Header } from \"./components/Header\";\nimport { MainBody } from \"./components/MainBody\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: { paddingBottom: theme.spacing(5) },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Header />\n        <MainBody />\n      </div>\n      <CssBaseline />\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"fontsource-roboto\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}