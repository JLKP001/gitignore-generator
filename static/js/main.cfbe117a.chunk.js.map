{"version":3,"sources":["components/Header.tsx","templates/templates.js","components/TemplateForm.tsx","components/MainBody.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","icon","marginRight","spacing","title","textTransform","Header","classes","AppBar","position","Toolbar","className","Typography","variant","initialTemplates","name","data","checked","root","display","listItems","paddingTop","paddingBottom","listItemsText","button","margin","TemplateForm","useState","templates","setTemplates","handleChange","event","targetName","target","newTemplates","map","template","List","component","ListItem","Checkbox","onChange","inputProps","ListItemText","primary","Button","color","marginLeft","marginTop","width","textAlign","subTitle","palette","grey","MainBody","Paper","App","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfbe117a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AppBar, makeStyles, Toolbar, Typography } from \"@material-ui/core\";\r\nimport LibraryBooksIcon from \"@material-ui/icons/LibraryBooks\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: { marginRight: theme.spacing(2) },\r\n  title: { textTransform: \"capitalize\" },\r\n}));\r\n\r\nexport const Header = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <LibraryBooksIcon className={classes.icon} />\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          gitignore generator\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n","export const initialTemplates = [\r\n  { name: \"altium\", data: \"Some data\", checked: false },\r\n  { name: \"python\", data: \"some other data\", checked: false },\r\n  { name: \"labview\", data: \"even more data\", checked: false },\r\n  { name: \"altium1\", data: \"Some data\", checked: false },\r\n  { name: \"python2\", data: \"some other data\", checked: false },\r\n  { name: \"labview3\", data: \"even more data\", checked: false },\r\n  { name: \"altium4\", data: \"Some data\", checked: false },\r\n  { name: \"python5\", data: \"some other data\", checked: false },\r\n  { name: \"labview6\", data: \"even more data\", checked: false },\r\n  { name: \"altium7\", data: \"Some data\", checked: false },\r\n  { name: \"python8\", data: \"some other data\", checked: false },\r\n  { name: \"labview9\", data: \"even more data\", checked: false },\r\n  // { name: \"altium10\", data: \"Some data\", checked: false },\r\n  // { name: \"python11\", data: \"some other data\", checked: false },\r\n  // { name: \"labview12\", data: \"even more data\", checked: false },\r\n  // { name: \"altium13\", data: \"Some data\", checked: false },\r\n  // { name: \"python14\", data: \"some other data\", checked: false },\r\n  // { name: \"labview15\", data: \"even more data\", checked: false },\r\n  // { name: \"altium16\", data: \"Some data\", checked: false },\r\n  // { name: \"python17\", data: \"some other data\", checked: false },\r\n  // { name: \"labview18\", data: \"even more data\", checked: false },\r\n  // { name: \"altium19\", data: \"Some data\", checked: false },\r\n  { name: \"python20\", data: \"some other data\", checked: false },\r\n  { name: \"labview21\", data: \"even more data\", checked: false },\r\n  { name: \"altium22\", data: \"Some data\", checked: false },\r\n  { name: \"python23\", data: \"some other data\", checked: false },\r\n  { name: \"labview24\", data: \"even more data\", checked: false },\r\n];\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\n\r\nimport { initialTemplates } from \"../templates/templates\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: { display: \"inline-block\" },\r\n  listItems: { paddingTop: \"0\", paddingBottom: \"0\" },\r\n  listItemsText: { textTransform: \"capitalize\" },\r\n  button: {\r\n    margin: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport const TemplateForm = () => {\r\n  const classes = useStyles();\r\n  const [templates, setTemplates] = useState(initialTemplates);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const targetName = event.target.name;\r\n    const newTemplates = templates.map((template) => {\r\n      if (template.name !== targetName) {\r\n        return template;\r\n      } else {\r\n        return { ...template, checked: event.target.checked };\r\n      }\r\n    });\r\n\r\n    setTemplates(newTemplates);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <List component=\"div\">\r\n        {templates.map((template) => (\r\n          <ListItem key={template.name} className={classes.listItems}>\r\n            <Checkbox\r\n              checked={template.checked}\r\n              onChange={handleChange}\r\n              inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n              name={template.name}\r\n            />\r\n            <ListItemText\r\n              primary={template.name}\r\n              className={classes.listItemsText}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Button variant=\"contained\" color=\"primary\" className={classes.button}>\r\n        generate!\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles, Paper, Typography } from \"@material-ui/core\";\r\n\r\nimport { TemplateForm } from \"./TemplateForm\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    marginTop: theme.spacing(5),\r\n    width: \"60%\",\r\n    textAlign: \"center\",\r\n  },\r\n  title: {\r\n    textTransform: \"capitalize\",\r\n    marginTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(1),\r\n  },\r\n  subTitle: {\r\n    textTransform: \"capitalize\",\r\n    color: theme.palette.grey[500],\r\n  },\r\n}));\r\n\r\nexport const MainBody = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Paper variant=\"outlined\" className={classes.root}>\r\n      <Typography variant=\"h4\" className={classes.title}>\r\n        select templates\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" className={classes.subTitle}>\r\n        choose files to ignore from a list of templates\r\n      </Typography>\r\n      <TemplateForm />\r\n    </Paper>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { CssBaseline, makeStyles } from \"@material-ui/core\";\n\nimport { Header } from \"./components/Header\";\nimport { MainBody } from \"./components/MainBody\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: { paddingBottom: theme.spacing(5) },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Header />\n        <MainBody />\n      </div>\n      <CssBaseline />\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"fontsource-roboto\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}